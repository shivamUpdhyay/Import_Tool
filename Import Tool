import hou
import os
from datetime import datetime
from PySide2 import QtWidgets

class ImportAssetsDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(ImportAssetsDialog, self).__init__(parent)
        self.setWindowTitle("Import Assets")
        self.resize(600, 400)
        self.setMinimumSize(300, 200)

        self.layout = QtWidgets.QVBoxLayout(self)

        buttonLayout = QtWidgets.QHBoxLayout()
        self.fileButton = QtWidgets.QPushButton("Choose Files")
        self.fileButton.clicked.connect(self.chooseFiles)
        buttonLayout.addWidget(self.fileButton)

        self.importButton = QtWidgets.QPushButton("Import")
        self.importButton.clicked.connect(self.importAssets)
        buttonLayout.addWidget(self.importButton)

        self.layout.addLayout(buttonLayout)

        line = QtWidgets.QFrame()
        line.setFrameShape(QtWidgets.QFrame.HLine)
        line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.layout.addWidget(line)

        self.tableWidget = QtWidgets.QTableWidget(0, 4)
        self.tableWidget.setHorizontalHeaderLabels(["File Name", "File Type", "Creation Date", "File Format"])
        self.layout.addWidget(self.tableWidget)

        checkboxLayout = QtWidgets.QHBoxLayout()
        self.importAndCloseCheckbox = QtWidgets.QCheckBox("Import and Close")
        self.importAndCloseCheckbox.setChecked(True)
        checkboxLayout.addWidget(self.importAndCloseCheckbox)

        self.materialXCheckbox = QtWidgets.QCheckBox("Import for MaterialX")
        checkboxLayout.addWidget(self.materialXCheckbox)

        self.layout.addLayout(checkboxLayout)

        self.files = []

    def chooseFiles(self):
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        files, _ = QtWidgets.QFileDialog.getOpenFileNames(
            self, "Choose Files", "",
            "All Files (*);;Image Files (*.jpg *.jpeg *.png *.gif *.bmp *.exr);;3D Files (*.obj *.fbx *.abc)",
            options=options
        )
        if files:
            self.files = files
            self.tableWidget.setRowCount(len(files))
            for i, file in enumerate(files):
                creation_time = datetime.fromtimestamp(os.path.getctime(file)).strftime("%Y-%m-%d %H:%M:%S")
                file_name = os.path.basename(file)
                file_type = os.path.splitext(file)[1]
                file_format = self.getFileFormat(file_type)
                self.tableWidget.setItem(i, 0, QtWidgets.QTableWidgetItem(file_name))
                self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(file_type))
                self.tableWidget.setItem(i, 2, QtWidgets.QTableWidgetItem(creation_time))
                self.tableWidget.setItem(i, 3, QtWidgets.QTableWidgetItem(file_format))

    def getFileFormat(self, file_type):
        if file_type.lower() in ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.exr']:
            return "Image"
        elif file_type.lower() in ['.obj', '.fbx', '.abc']:
            return "3D Model"
        else:
            return "Other"
    
    def importAssets(self):
        if any(file.lower().endswith('.obj') for file in self.files):
            self.importForOBJModels()
        elif any(file.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp', '.exr')) for file in self.files):
            self.importForTraditional()
        elif self.materialXCheckbox.isChecked():
            self.importForMaterialX()

    def importForOBJModels(self):
        obj_context = hou.node("/obj")
        for file in self.files:
            if file.lower().endswith('.obj'):
                base_name = os.path.splitext(os.path.basename(file))[0]
                geo_node = obj_context.createNode("geo", base_name)
                file_node = geo_node.createNode("file")
                file_node.parm("file").set(file)
                geo_node.layoutChildren()

        if self.importAndCloseCheckbox.isChecked():
            self.close()

    def importForMaterialX(self):
        stage_context = hou.node("/stage")
        materiallibrary = stage_context.createNode("materiallibrary", "MaterialLibrary")
        subnet = materiallibrary.createNode("subnet", "MaterialXSubnet")
        mtlxstandard_surface = subnet.createNode("principledshader", "mtlxstandard_surface")
        materiallibrary.layoutChildren()

        if self.importAndCloseCheckbox.isChecked():
            self.close()

    def importForTraditional(self):
        selected_nodes = hou.selectedNodes()
        if not selected_nodes:
            hou.ui.displayMessage("Please select one or more geometry nodes.")
            return

        for node in selected_nodes:
            if node.type().name() == "geo":
                file_node = next((n for n in node.children() if n.type().name() == "file"), None)
                if not file_node:
                    print("No File node selected, creating one on display flag's node")
                    display_node = node.displayNode()
                    file_node = node.createNode("file")
                    file_node.setInput(0, display_node)

                matnet = node.node("matnet")
                if not matnet:
                    matnet = node.createNode("matnet", "material_network")

                # Remove all existing children in matnet before creating new materials
                for child in matnet.children():
                    child.destroy()

                # Initialize shader_names here
                shader_names = []

                basecolor_files = [file for file in self.files if "_basecolor" in file]
                for file in basecolor_files:
                    shader_name = os.path.splitext(os.path.basename(file))[0].replace("_basecolor", "")
                    shader_names.append(shader_name)
                    shader = matnet.createNode("principledshader", shader_name)
                    shader.parm("basecolor_useTexture").set(1)
                    shader.parm("basecolor_texture").set(file)
                    shader.parm("basecolorr").set(1)
                    shader.parm("basecolorg").set(1)
                    shader.parm("basecolorb").set(1)
                    for additional_file in self.files:
                        if shader_name in additional_file and additional_file != file:
                            if "roughness" in additional_file:
                                shader.parm("rough_useTexture").set(1)
                                shader.parm("rough_texture").set(additional_file)
                            if "metallic" in additional_file:
                                shader.parm("metallic_useTexture").set(1)
                                shader.parm("metallic_texture").set(additional_file)
                            if "normal" in additional_file:
                                shader.parm("baseBumpAndNormal_enable").set(1)
                                shader.parm("baseNormal_texture").set(additional_file)
                            if "emission" in additional_file:
                                shader.parm("emitcolor_useTexture").set(1)
                                shader.parm("emitcolor_texture").set(additional_file)
                            if "displacement" in additional_file:
                                shader.parm("dispTex_enable").set(1)
                                shader.parm("dispTex_texture").set(additional_file)
                    
                #matnet.layoutChildren()
                matnet.layoutChildren()

                # Create Material and Null nodes and connect them
                material_node = node.createNode("material", "Assign_materials")
                material_node.setInput(0, file_node)
                null_node = node.createNode("null", "OUT_{}".format(node.name()))
                null_node.setInput(0, material_node)
                null_node.setColor(hou.Color((0, 0, 0)))
                null_node.setDisplayFlag(True)
                null_node.setRenderFlag(True)
                
                
                material_node.parm("num_materials").set(len(shader_names))
                
                for i, shader_name in enumerate(shader_names, start=1):
                    group_parm_name = f"group{i}"
                    material_path_parm_name = f"shop_materialpath{i}"
                    material_group_path = f"@shop_materialpath=/mat/{shader_name}"
                    material_node.parm(group_parm_name).set(material_group_path)
                    material_node.parm(material_path_parm_name).set(matnet.path() + "/" + shader_name)
                        
                node.layoutChildren()       


        if self.importAndCloseCheckbox.isChecked():
            self.close()

    
def showDialog():
    dialog = ImportAssetsDialog(hou.ui.mainQtWindow())
    dialog.show()

showDialog()
